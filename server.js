// ============================================
// BACKEND –°–ï–†–í–ï–† (Node.js + Express)
// server.js
// ============================================

const express = require('express');
const cors = require('cors');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const crypto = require('crypto');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors()); // –î–æ–∑–≤–æ–ª—è—î –∑–∞–ø–∏—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
app.use(express.json());

// ============================================
// –ë–ê–ó–ê –î–ê–ù–ò–• (SQLite)
// ============================================
const db = new sqlite3.Database('./trading_bot.db', (err) => {
    if (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err);
    } else {
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
    }
});

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
db.serialize(() => {
    // –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    db.run(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            access_token TEXT UNIQUE NOT NULL,
            chat_id TEXT NOT NULL,
            thread_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `);

    // –¢–∞–±–ª–∏—Ü—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
    db.run(`
        CREATE TABLE IF NOT EXISTS tracked_positions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            card_id TEXT NOT NULL,
            is_open INTEGER DEFAULT 0,
            last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id),
            UNIQUE(user_id, card_id)
        )
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ');
});

// ============================================
// TELEGRAM BOT TOKEN (–∑ BotFather)
// ============================================
const TELEGRAM_BOT_TOKEN = '7711323850:AAFUXQS7GdZkSkzOtbYzvOnNtHaN-Y_ewfM'; // –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω

// ============================================
// –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–ü–†–ê–í–ö–ò –í TELEGRAM
// ============================================
async function sendToTelegram(chatId, threadId, message) {
    try {
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const data = {
            chat_id: chatId,
            text: message,
            parse_mode: 'HTML',
            disable_web_page_preview: true
        };

        if (threadId && threadId.trim() !== '') {
            data.message_thread_id = parseInt(threadId);
        }

        const response = await axios.post(url, data);
        
        if (response.data.ok) {
            console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            return { success: true };
        } else {
            console.error('‚ùå Telegram API –ø–æ–º–∏–ª–∫–∞:', response.data);
            return { success: false, error: response.data };
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
        return { success: false, error: error.message };
    }
}

// ============================================
// –ì–ï–ù–ï–†–ê–¶–Ü–Ø –¢–û–ö–ï–ù–£ –î–û–°–¢–£–ü–£
// ============================================
function generateAccessToken() {
    return crypto.randomBytes(32).toString('hex');
}

// ============================================
// API ENDPOINTS
// ============================================

// 1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/api/register', (req, res) => {
    const { username, chatId, threadId } = req.body;

    if (!username || !chatId) {
        return res.status(400).json({ 
            success: false, 
            error: 'Username —Ç–∞ chatId –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' 
        });
    }

    const accessToken = generateAccessToken();

    db.run(
        'INSERT INTO users (username, access_token, chat_id, thread_id) VALUES (?, ?, ?, ?)',
        [username, accessToken, chatId, threadId || null],
        function(err) {
            if (err) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', err);
                return res.status(500).json({ 
                    success: false, 
                    error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' 
                });
            }

            console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${username}`);
            res.json({
                success: true,
                accessToken: accessToken,
                userId: this.lastID
            });
        }
    );
});

// 2. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
app.post('/api/notify', async (req, res) => {
    const { accessToken, cardId, positionData } = req.body;

    if (!accessToken || !cardId || !positionData) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö' 
        });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.get(
        'SELECT * FROM users WHERE access_token = ?',
        [accessToken],
        async (err, user) => {
            if (err || !user) {
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É' 
                });
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
            db.get(
                'SELECT * FROM tracked_positions WHERE user_id = ? AND card_id = ?',
                [user.id, cardId],
                async (err, position) => {
                    if (err) {
                        return res.status(500).json({ 
                            success: false, 
                            error: '–ü–æ–º–∏–ª–∫–∞ –ë–î' 
                        });
                    }

                    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ (is_open = 0) –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î
                    const shouldSend = !position || position.is_open === 0;

                    if (shouldSend) {
                        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        const userName = user.username ? ` (${user.username})` : '';
                        const message = `
üöÄ <b>–ù–û–í–ê –ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê!</b>${userName}

üìä <b>–°–∏–º–≤–æ–ª:</b> ${positionData.symbol}
üîÑ <b>–ë—ñ—Ä–∂—ñ:</b> ${positionData.exchange1} ${positionData.direction1} - ${positionData.exchange2} ${positionData.direction2}

‚öôÔ∏è <b>–ü–ê–†–ê–ú–ï–¢–†–ò –í–•–û–î–£:</b>
‚îú‚îÄ Open Spread: ${positionData.openSpread}%
‚îú‚îÄ Close Spread: ${positionData.closeSpread}%
‚îú‚îÄ –†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä—É: ${positionData.orderSize}
‚îú‚îÄ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä—ñ–≤: ${positionData.maxOrders}
‚îú‚îÄ Spread –ø—Ä–∏ –≤—Ö–æ–¥—ñ: ${positionData.enterSpread}
‚îî‚îÄ –ß–∞—Å –∫–æ–ª–∏ –±—É–ª–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: ${positionData.startTime}

üí∞ <b>–ü–û–¢–û–ß–ù–Ü –î–ê–ù–Ü:</b>
‚îú‚îÄ Funding Rate: ${positionData.fundingRate1} / ${positionData.fundingRate2}
‚îú‚îÄ –î–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: Max:${positionData.allowedSize}
‚îî‚îÄ –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤: ${positionData.ordersCount}
                        `.trim();

                        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram
                        const result = await sendToTelegram(
                            user.chat_id, 
                            user.thread_id, 
                            message
                        );

                        if (result.success) {
                            // –û–Ω–æ–≤–ª—é—î–º–æ/—Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é
                            db.run(
                                `INSERT INTO tracked_positions (user_id, card_id, is_open, last_updated)
                                 VALUES (?, ?, 1, CURRENT_TIMESTAMP)
                                 ON CONFLICT(user_id, card_id) 
                                 DO UPDATE SET is_open = 1, last_updated = CURRENT_TIMESTAMP`,
                                [user.id, cardId]
                            );

                            res.json({ 
                                success: true, 
                                message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
                                sent: true
                            });
                        } else {
                            res.status(500).json({ 
                                success: false, 
                                error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram' 
                            });
                        }
                    } else {
                        // –ü–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤–∞–Ω–∞ —ñ –≤—ñ–¥–∫—Ä–∏—Ç–∞
                        res.json({ 
                            success: true, 
                            message: '–ü–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤–∞–Ω–∞',
                            sent: false
                        });
                    }
                }
            );
        }
    );
});

// 3. –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
app.post('/api/close', (req, res) => {
    const { accessToken, cardId } = req.body;

    if (!accessToken || !cardId) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö' 
        });
    }

    db.get(
        'SELECT id FROM users WHERE access_token = ?',
        [accessToken],
        (err, user) => {
            if (err || !user) {
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É' 
                });
            }

            db.run(
                `INSERT INTO tracked_positions (user_id, card_id, is_open, last_updated)
                 VALUES (?, ?, 0, CURRENT_TIMESTAMP)
                 ON CONFLICT(user_id, card_id) 
                 DO UPDATE SET is_open = 0, last_updated = CURRENT_TIMESTAMP`,
                [user.id, cardId],
                (err) => {
                    if (err) {
                        return res.status(500).json({ 
                            success: false, 
                            error: '–ü–æ–º–∏–ª–∫–∞ –ë–î' 
                        });
                    }

                    res.json({ 
                        success: true, 
                        message: '–ü–æ–∑–∏—Ü—ñ—è –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –∑–∞–∫—Ä–∏—Ç–∞' 
                    });
                }
            );
        }
    );
});

// 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–≤—ñ–¥–º—ñ—á–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–∑–∏—Ü—ñ—ó —è–∫ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤–∞–Ω—ñ)
app.post('/api/init', (req, res) => {
    const { accessToken, openPositions } = req.body;

    if (!accessToken || !Array.isArray(openPositions)) {
        return res.status(400).json({ 
            success: false, 
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö' 
        });
    }

    db.get(
        'SELECT id FROM users WHERE access_token = ?',
        [accessToken],
        (err, user) => {
            if (err || !user) {
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É' 
                });
            }

            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó —è–∫ –≤–∂–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤–∞–Ω—ñ
            const stmt = db.prepare(
                `INSERT INTO tracked_positions (user_id, card_id, is_open, last_updated)
                 VALUES (?, ?, 1, CURRENT_TIMESTAMP)
                 ON CONFLICT(user_id, card_id) 
                 DO UPDATE SET is_open = 1, last_updated = CURRENT_TIMESTAMP`
            );

            openPositions.forEach(cardId => {
                stmt.run([user.id, cardId]);
            });

            stmt.finalize();

            res.json({ 
                success: true, 
                message: `–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ${openPositions.length} –ø–æ–∑–∏—Ü—ñ–π` 
            });
        }
    );
});

// 5. –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
app.post('/api/test', async (req, res) => {
    const { accessToken } = req.body;

    if (!accessToken) {
        return res.status(400).json({ 
            success: false, 
            error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' 
        });
    }

    db.get(
        'SELECT * FROM users WHERE access_token = ?',
        [accessToken],
        async (err, user) => {
            if (err || !user) {
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É' 
                });
            }

            const userName = user.username ? ` (${user.username})` : '';
            const testMessage = `
üß™ <b>–¢–ï–°–¢–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø</b>${userName}

‚úÖ Telegram –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!
‚è∞ –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}

–¢–µ–ø–µ—Ä –±–æ—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π.

üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!
            `.trim();

            const result = await sendToTelegram(
                user.chat_id, 
                user.thread_id, 
                testMessage
            );

            if (result.success) {
                res.json({ 
                    success: true, 
                    message: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ' 
                });
            } else {
                res.status(500).json({ 
                    success: false, 
                    error: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏' 
                });
            }
        }
    );
});

// ============================================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ============================================
app.listen(PORT, () => {
    console.log('========================================');
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('========================================');
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('uncaughtException', (err) => {
    console.error('‚ùå Uncaught Exception:', err);
});

process.on('unhandledRejection', (err) => {
    console.error('‚ùå Unhandled Rejection:', err);
});
